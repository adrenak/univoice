{
  "api/Adrenak.UniVoice.ChatroomAgent.html": {
    "href": "api/Adrenak.UniVoice.ChatroomAgent.html",
    "title": "Class ChatroomAgent | UniVoice documentation",
    "keywords": "Class ChatroomAgent Provides the means to host or connect to a chatroom. Inheritance Object ChatroomAgent Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax public class ChatroomAgent : IDisposable Constructors ChatroomAgent(IChatroomNetwork, IAudioInput, IAudioOutputFactory) Creates and returns a new agent using the provided dependencies. Declaration public ChatroomAgent(IChatroomNetwork chatroomNetwork, IAudioInput audioInput, IAudioOutputFactory audioOutputFactory) Parameters Type Name Description IChatroomNetwork chatroomNetwork The chatroom network implementation for chatroom access and sending data to peers in a chatroom. IAudioInput audioInput The source of the outgoing audio IAudioOutputFactory audioOutputFactory The factory used for creating IAudioOutput instances for peers so that incoming audio from peers can be played. Fields PeerOutputs There is a IAudioOutput for each peer that gets created using the provided AudioOutputFactory The IAudioOutput instance corresponding to a peer is responsible for playing the audio that we receive that peer. Declaration public Dictionary<short, IAudioOutput> PeerOutputs Field Value Type Description Dictionary < Int16 , IAudioOutput > PeerSettings ChatroomPeerSettings for each peer which allows you to read or change the settings for a specific peer. Use [id] to get settings for a peer with ID id; Declaration public Dictionary<short, ChatroomPeerSettings> PeerSettings Field Value Type Description Dictionary < Int16 , ChatroomPeerSettings > Properties AudioInput Source of outgoing audio that can be transmitted over the network to peers Declaration public IAudioInput AudioInput { get; } Property Value Type Description IAudioInput AudioOutputFactory A factory that returns an IAudioOutput instance. Used every time a Peer connects for that peer to get an output for that peer. Declaration public IAudioOutputFactory AudioOutputFactory { get; } Property Value Type Description IAudioOutputFactory CurrentMode The current ChatroomAgentMode of this agent Declaration public ChatroomAgentMode CurrentMode { get; } Property Value Type Description ChatroomAgentMode MuteOthers Mutes all the peers. If set to true, no incoming audio from other peers will be played. If you want to selectively mute a peer, use the muteThem flag in the PeerSettings instance for that peer. Note that setting this will not change PeerSettings Declaration public bool MuteOthers { get; set; } Property Value Type Description Boolean MuteSelf Whether this agent is muted or not. If set to true, voice data will not be sent to ANY peer. If you want to selectively mute yourself to a peer, use the muteSelf flag in the PeerSettings instance for that peer. Note that setting this will not change PeerSettings Declaration public bool MuteSelf { get; set; } Property Value Type Description Boolean Network The underlying network which the agent uses to host or connect to chatrooms, and send and receive data to and from peers Declaration public IChatroomNetwork Network { get; } Property Value Type Description IChatroomNetwork Methods Dispose() Disposes the instance. WARNING: Calling this method will also dispose the dependencies passed to it in the constructor. Be mindful of this if you're sharing dependencies between multiple instances and/or using them outside this instance. Declaration public void Dispose()"
  },
  "api/Adrenak.UniVoice.ChatroomAgentMode.html": {
    "href": "api/Adrenak.UniVoice.ChatroomAgentMode.html",
    "title": "Enum ChatroomAgentMode | UniVoice documentation",
    "keywords": "Enum ChatroomAgentMode Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax [Serializable] public enum ChatroomAgentMode Fields Name Description Guest The agent has joined a chatroom and is a guest there Host The agent is hosting a chatroom. May or may not have guests Unconnected The agent is neither connected to a chatroom nor hosting one."
  },
  "api/Adrenak.UniVoice.ChatroomAudioSegment.html": {
    "href": "api/Adrenak.UniVoice.ChatroomAudioSegment.html",
    "title": "Struct ChatroomAudioSegment | UniVoice documentation",
    "keywords": "Struct ChatroomAudioSegment Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ChatroomAudioSegment Fields channelCount THe number of channels in the audio Declaration public int channelCount Field Value Type Description Int32 frequency The frequency (or sampling rate) of the audio Declaration public int frequency Field Value Type Description Int32 samples A float array representing the audio sample data Declaration public float[] samples Field Value Type Description Single [] segmentIndex The segment index of the audio samples Declaration public int segmentIndex Field Value Type Description Int32"
  },
  "api/Adrenak.UniVoice.ChatroomPeerSettings.html": {
    "href": "api/Adrenak.UniVoice.ChatroomPeerSettings.html",
    "title": "Class ChatroomPeerSettings | UniVoice documentation",
    "keywords": "Class ChatroomPeerSettings Inheritance Object ChatroomPeerSettings Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax [Serializable] public class ChatroomPeerSettings Fields muteSelf Whether this peer will receive out voice. Use this to stop sending your audio to a peer. Declaration public bool muteSelf Field Value Type Description Boolean muteThem Whether this peer is muted. Use this to ignore a person. Declaration public bool muteThem Field Value Type Description Boolean"
  },
  "api/Adrenak.UniVoice.Extensions.html": {
    "href": "api/Adrenak.UniVoice.Extensions.html",
    "title": "Class Extensions | UniVoice documentation",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods EnsureKey<T, K>(Dictionary<T, K>, T, K) Adds the given key to the dictionary with a value if the key is not present before. Declaration public static void EnsureKey<T, K>(this Dictionary<T, K> dict, T t, K k) Parameters Type Name Description Dictionary <T, K> dict T t The key to check and add K k The value if the key is added Type Parameters Name Description T K EnsurePair<T, K>(Dictionary<T, K>, T, K) Ensures a key and value pair are in the dictionary Declaration public static void EnsurePair<T, K>(this Dictionary<T, K> dict, T t, K k) Parameters Type Name Description Dictionary <T, K> dict T t The key to ensure K k The value associated with the key Type Parameters Name Description T K Position(AudioSource) Returns the normalized position of the AudioSource on its AudioClip Declaration public static float Position(this AudioSource source) Parameters Type Name Description AudioSource source Returns Type Description Single"
  },
  "api/Adrenak.UniVoice.html": {
    "href": "api/Adrenak.UniVoice.html",
    "title": "Namespace Adrenak.UniVoice | UniVoice documentation",
    "keywords": "Namespace Adrenak.UniVoice Classes ChatroomAgent Provides the means to host or connect to a chatroom. ChatroomPeerSettings Extensions Structs ChatroomAudioSegment Interfaces IAudioInput Source of user voice input. This would usually be implemented over a microphone to get the users voice. But it can also be used in other ways such as streaming an mp4 file from disk. It's just an input and the source doesn't matter. IAudioOutput Responsible for playing audio that is sent to it. You'd normally want a based implementation to play the audio in Unity. But this class can be used in other ways just as streaming the received audio to a server or writing it to a local file. It's just an audio output and the destination doesn't matter. IAudioOutputFactory An abstract factory that creates IAudioOutput based on given parameters. IChatroomNetwork Enums ChatroomAgentMode"
  },
  "api/Adrenak.UniVoice.IAudioInput.html": {
    "href": "api/Adrenak.UniVoice.IAudioInput.html",
    "title": "Interface IAudioInput | UniVoice documentation",
    "keywords": "Interface IAudioInput Source of user voice input. This would usually be implemented over a microphone to get the users voice. But it can also be used in other ways such as streaming an mp4 file from disk. It's just an input and the source doesn't matter. Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax public interface IAudioInput : IDisposable Properties ChannelCount The number of channels in the audio Declaration int ChannelCount { get; } Property Value Type Description Int32 Frequency The sampling frequency of the audio Declaration int Frequency { get; } Property Value Type Description Int32 SegmentRate The number of segments (a segment is a sequence of audio samples) that are emitted from the source every second. A 16000 Hz source with one channel at a rate of 10 will output an array of 1600 samples every 100 milliseconds. A 44000 Hz source with two channels at a rate of 10 will output an array of 8800 samples every 100 milliseconds. Declaration int SegmentRate { get; } Property Value Type Description Int32 Events OnSegmentReady Fired when a segment (sequence of audio samples) is ready Declaration event Action<int, float[]> OnSegmentReady Event Type Type Description Action < Int32 , Single []>"
  },
  "api/Adrenak.UniVoice.IAudioOutput.html": {
    "href": "api/Adrenak.UniVoice.IAudioOutput.html",
    "title": "Interface IAudioOutput | UniVoice documentation",
    "keywords": "Interface IAudioOutput Responsible for playing audio that is sent to it. You'd normally want a based implementation to play the audio in Unity. But this class can be used in other ways just as streaming the received audio to a server or writing it to a local file. It's just an audio output and the destination doesn't matter. Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax public interface IAudioOutput : IDisposable Properties ID An ID associated with this audio output Declaration string ID { get; set; } Property Value Type Description String Methods Feed(Int32, Int32, Int32, Single[]) Feeds the data to the output implementation Declaration void Feed(int segmentIndex, int frequency, int channelCount, float[] audioSamples) Parameters Type Name Description Int32 segmentIndex The index of the segment of samples from the audio Int32 frequency The frequency/sampling rate of the audio Int32 channelCount The number of channels in the audio Single [] audioSamples The audio samples/segment being fed"
  },
  "api/Adrenak.UniVoice.IAudioOutputFactory.html": {
    "href": "api/Adrenak.UniVoice.IAudioOutputFactory.html",
    "title": "Interface IAudioOutputFactory | UniVoice documentation",
    "keywords": "Interface IAudioOutputFactory An abstract factory that creates IAudioOutput based on given parameters. Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax public interface IAudioOutputFactory Methods Create(Int32, Int32, Int32) Creates an instance of a concrete IAudioOutput class Declaration IAudioOutput Create(int frequency, int channelCount, int samplesLen) Parameters Type Name Description Int32 frequency Frequency/sample rate of the audio Int32 channelCount Number of audio channels in data Int32 samplesLen Number of samples in audio segment Returns Type Description IAudioOutput"
  },
  "api/Adrenak.UniVoice.IChatroomNetwork.html": {
    "href": "api/Adrenak.UniVoice.IChatroomNetwork.html",
    "title": "Interface IChatroomNetwork | UniVoice documentation",
    "keywords": "Interface IChatroomNetwork Namespace : Adrenak.UniVoice Assembly : cs.temp.dll.dll Syntax public interface IChatroomNetwork : IDisposable Properties OwnID The ID of the local user in the current chatroom Declaration short OwnID { get; } Property Value Type Description Int16 PeerIDs IDs of all the peers in the current chatroom Declaration List<short> PeerIDs { get; } Property Value Type Description List < Int16 > Methods CloseChatroom(Object) Closes a chatroom that the local user is hosting Declaration void CloseChatroom(object data = null) Parameters Type Name Description Object data Any arguments for closing the room HostChatroom(Object) Creates a chatroom Declaration void HostChatroom(object data = null) Parameters Type Name Description Object data Name of the chatroom JoinChatroom(Object) Joins a chatroom Declaration void JoinChatroom(object data = null) Parameters Type Name Description Object data The name of the chatroom to join LeaveChatroom(Object) Leaves the chatroom the local user is currently in, if any Declaration void LeaveChatroom(object data = null) Parameters Type Name Description Object data Any arguments for leaving the room SendAudioSegment(Int16, ChatroomAudioSegment) Sends audio data over the network Declaration void SendAudioSegment(short peerID, ChatroomAudioSegment data) Parameters Type Name Description Int16 peerID ChatroomAudioSegment data The data to be transmitted. Events OnAudioReceived Fired when the network receives audio data from a peer. Declaration event Action<short, ChatroomAudioSegment> OnAudioReceived Event Type Type Description Action < Int16 , ChatroomAudioSegment > OnAudioSent Fired when the local user sets audio data to a peer. Declaration event Action<short, ChatroomAudioSegment> OnAudioSent Event Type Type Description Action < Int16 , ChatroomAudioSegment > OnChatroomCreationFailed Fired when the attempt to create a chatroom fails. Provides an exception as event data. Declaration event Action<Exception> OnChatroomCreationFailed Event Type Type Description Action < Exception > OnChatroomJoinFailed Fired when an attempt to join a chatroom fails. Provides an exception as event data. Declaration event Action<Exception> OnChatroomJoinFailed Event Type Type Description Action < Exception > OnClosedChatroom Fired when a chatroom is closed. Declaration event Action OnClosedChatroom Event Type Type Description Action OnCreatedChatroom Fired when a chatroom is created. Declaration event Action OnCreatedChatroom Event Type Type Description Action OnJoinedChatroom Fired when the local user joins a chatroom. Provides the chatroom ID assigned as event data. Declaration event Action<short> OnJoinedChatroom Event Type Type Description Action < Int16 > OnLeftChatroom Fired when the local user leaves a chatroom Declaration event Action OnLeftChatroom Event Type Type Description Action OnPeerJoinedChatroom Fired when a peer joins the chatroom. Provides the ID of the peer as event data. This action also MUST be called for all previously existing peers when we connect to a network. Declaration event Action<short> OnPeerJoinedChatroom Event Type Type Description Action < Int16 > OnPeerLeftChatroom Fired when a peer leaves the chatroom. Provides the ID of the peer as event data. Declaration event Action<short> OnPeerLeftChatroom Event Type Type Description Action < Int16 >"
  },
  "index.html": {
    "href": "index.html",
    "title": "UniVoice | UniVoice documentation",
    "keywords": "⚠️ Inbuilt implementations and samples have been removed from this repository. They're being moved to separate modules and projects. This is a relatively major change and the univoice project may be unstable for a while. CI is currently broken. UniVoice UniVoice is a voice chat/VoIP solution for Unity. Some features of UniVoice: 👥 Group voice chat. Multiple peers can join a chatroom and exchange audio. ⚙ Peer specific settings. Don't want to listen to a peer? Mute them. Don't want someone listening to you? Mute yourself against them. 🎨 Customize your audio input, output and networking layer. 🎤 Configurable Audio Input : Decide what the input of your outgoing audio is. Let it be from Unity's Microphone class, or a live streaming audio, or an MP4 file on the disk. 🔊 Configurable Audio Output : Decide where the incoming peer audio goes. Let the output of incoming audio be Unity AudioSource to play the audio in-game, or write it into an MP4 on the disk, or stream it to an online service. 🌐 Configurable Network : Want to use UniVoice in a WLAN project using Telepathy? Just adapt its API for UniVoice with a simple the IChatroomNetwork interface. Using your own backend for multiplayer? Create and expose your audio API and write a UniVoice implementation, again with the same interface. Docs Manuals and sample projects are not available yet. For the API reference, please visit http://www.vatsalambastha.com/univoice Usage Creating a chatroom agent To be able to host and join voice chatrooms, you need a ChatroomAgent instance. var agent = new ChatroomAgent(IChatroomNetwork network, IAudioInput audioInput, IAudioOutput audioOutput); Hosting and joining chatrooms Every peer in the chatroom is assigned an ID by the host. And every peer has a peer list, representing the other peers in the chatroom. To get your ID agent.Network.OwnID; To get a list of the other peers in the chatroom, use this: agent.Network.PeersIDs agent.Network also provides methods to host or join a chatroom. Here is how you use them: // Host a chatroom using a name agent.Network.HostChatroom(optional_data); // Join an existing chatroom using a name agent.Network.JoinChatroom(optional_data); // Leave the chatroom, if connected to one agent.Network.LeaveChatroom(optional_data); // Closes a chatroom, if is hosting one agent.Network.CloseChatroom(optional_data); Muting Audio To mute everyone in the chatroom, use agent.MuteOthers = true; or set it to false to unmute them all. To mute yourself use agent.MuteSelf = true; or set it to false to unmute yourself. This will stop sending your audio to all the peers in the chatroom. For muting a specific peer, first get the peers settings object using this: agent.PeerSettings[id].muteThem = true; // where id belongs to the peer in question If you want to mute yourself towards a specific peer, use this: agent.PeerSettings[id].muteSelf = true; // where id belongs to the peer in question Events agent.Network provides several network related events. Refer to the API reference for them. License and Support This project is under the MIT license . Updates and maintenance are not guaranteed and the project is maintained by the original developer in his free time. Community contributions are welcome. Commercial consultation and development can be arranged but is subject to schedule and availability. Contact The developer can be reached at the following links: Website LinkedIn GitHub Twitter"
  }
}